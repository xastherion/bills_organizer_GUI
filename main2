#   BILLS_ORGANIZER
import os, shutil, time, datetime
from tkinter import Label, Entry, Button, Tk, Checkbutton, StringVar
from datetime import datetime


# -------------
master = Tk()
master.title('Bills-Organizer - Rechnung Eingabe')
master.geometry('500x460')    # breite-X-hohe x,y
# GEOMETRIE  ##########################################
alt = '30'    # alt estandar para cada boton, entrada o etiqueta
anch = ['100', '300', '150']       # anch para etiquetas y botones
dist_hor = ['30', '160', '290']    # distancias entre columnas
dist_ver = ['30', '60', '90', '120', '150', '180', '210', '240', '270', '300', '330', '360', '390', '420', '450']  # dist lineas
msgs = {
    'msg_leer': '***',
    'msg_format': 'Falsches Format, bitte engeben YYYY-MM-DD',
    'msg_nodatum': 'Einkaufsdatum ist leer, ich übernehme Heute',
    'msg_fileimp': 'file.pdf importiert, Quell-Datei ist gelöscht!',
    'msg_keinimp': 'für diese Rechnung wurde keine PDF-Datei importiert!'
    }

# FUNKTIONEN ###########################################


def weiter():
    schreiben()
    eingaben_art()

# def message():
#    print("msgs", msgs['msg_format'])
#    Label(master, text=msgs['msg_format']).place(x = dist_hor[0], y = dist_ver[13], width = anch[1], height = alt)

def schreiben():        # Schreibt alle vars in lista und lista in archivo
    if var_ekdatum.get() == "" :         # wenn keine EKDatum nehmt heute
        print('Einkaufsdatum ist leer, ich übernehme Heute')
        heute = time.strftime("%d.%m.%Y")
        var_ekdatum.set(heute)
    else:               # wenn EKDatum ist eingegeben, überprüft
        try:
            datum = (str(datetime.strptime(var_ekdatum.get(), "%Y-%m-%d"))).replace(" 00:00:00", '')
            var_ekdatum.set(datum)
        except ValueError:
            # global msg_name
            # msg_name = 'msg_format'
            # message()
            # print("Falsches Format, bitte engeben YYYY-MM-DD")
    lista = [var_rnummer.get(), ';', var_ekdatum.get(), ';', var_liefnt.get(), ';', var_bemerkg.get(), ';',
             var_name.get(), ';', var_preis.get(), ';', var_menge.get(), '\n']
    archivo = open('rechnungen.csv', 'a')
    archivo.write("\t".join(lista))
    pdfrechnungsfile_import()


def eingaben_rech():  # ENTRYS RECHNUNG ###################################### Entry rechnungsnummer
    global var_rnummer, var_ekdatum, var_liefnt, var_bemerkg, var_rgnpfad, var_brutto, \
           entry_rnummer, entry_ekdatum, entry_liefnt, entry_bemerkg, entry_rgnpfad, chkbutton_brutto
    var_rnummer = StringVar()
    var_ekdatum = StringVar()
    var_liefnt = StringVar()
    var_bemerkg = StringVar()
    var_rgnpfad = StringVar()
    var_brutto = StringVar()
    entry_rnummer = Entry(master, textvariable=var_rnummer).  place(x=dist_hor[1], y=dist_ver[1], width=anch[1], height=alt)
    entry_ekdatum = Entry(master, textvariable=var_ekdatum).  place(x=dist_hor[1], y=dist_ver[2], width=anch[1], height=alt)
    entry_liefnt = Entry(master, textvariable=var_liefnt).place(x=dist_hor[1], y=dist_ver[3], width=anch[1], height=alt)
    entry_bemerkg = Entry(master, textvariable=var_bemerkg).place(x=dist_hor[1], y=dist_ver[4], width=anch[1], height=alt)
    entry_rgnpfad = Entry(master, textvariable=var_rgnpfad).place(x=dist_hor[1], y=dist_ver[5], width=anch[1], height=alt)
    chkbutton_brutto = Checkbutton(master, text='Brutto Preise', variable=var_brutto).place(x=dist_hor[1], y=dist_ver[6])


def eingaben_art():     # accept entrys and delete olds entrys
    global entry_name, entry_preis, entry_menge, var_name, var_preis, var_menge
    var_name = StringVar(master, value='')
    var_preis = StringVar(master, value='')
    var_menge = StringVar(master, value='')
    entry_name  = Entry(master, textvariable=var_name). place(x=dist_hor[1], y=dist_ver[8], width=anch[1], height=alt)
    entry_preis = Entry(master, textvariable=var_preis).place(x=dist_hor[1], y=dist_ver[9], width=anch[1], height=alt)
    entry_menge = Entry(master, textvariable=var_menge).place(x=dist_hor[1], y=dist_ver[10], width=anch[1], height=alt)


def etiketten():
    # RECHNUNG
    Label(master, text='RECHNUNG ---').place(x=dist_hor[0], y=dist_ver[0], width=anch[0], height=alt)
    Label(master, text='Rechnungsnr.:').place(x=dist_hor[0], y=dist_ver[1], width=anch[0], height=alt)
    Label(master, text='Einkaufdatum:').place(x=dist_hor[0], y=dist_ver[2], width=anch[0], height=alt)
    Label(master, text='Lieferant   :').place(x=dist_hor[0], y=dist_ver[3], width=anch[0], height=alt)
    Label(master, text='Bemerkung   :').place(x=dist_hor[0], y=dist_ver[4], width=anch[0], height=alt)
    Label(master, text='Rechngspfad:').place(x=dist_hor[0], y=dist_ver[5], width=anch[0], height=alt)
    # ARTIKEL
    Label(master, text='ARTIKEL ----').place(x=dist_hor[0], y=dist_ver[7], width=anch[0], height=alt)
    Label(master, text="Name  : ").place(x=dist_hor[0], y=dist_ver[8], width=anch[0], height=alt)
    Label(master, text="Preis : ").place(x=dist_hor[0], y=dist_ver[9], width=anch[0], height=alt)
    Label(master, text="Menge : ").place(x=dist_hor[0], y=dist_ver[10], width=anch[0], height=alt)
    message()
    # BUTTONS
    Button(master, text='Speicher & Weiter', command=weiter).place(x=dist_hor[0], y=dist_ver[12], width=anch[2], height=alt)
    Button(master, text='Exit ohne speicher', command=ende).place(x=dist_hor[2], y=dist_ver[12], width=anch[2], height=alt)


def namepdf():  # Aendert die Rechnung zum gegebene Ordner mit angepasste Name
    # pdfrechnungsname = (var_ekdatum.get() + "-" + var_liefnt.get() + "-" + var_bemerkg.get() + ".pdf").replace('\t', '')
    # print(pdfrechnungsname)
    print("")


def pdfrechnungsfile_import():
    '''3 Möglichkeiten: "n" importiert nichts, "s" importiert file.pdf in die s'''
    global pdfrechnungsname, pdfname_ziel
    pdfname_ziel = (var_ekdatum.get() + "-" + var_liefnt.get() + "-" + var_bemerkg.get() + ".pdf").replace('\t', '')
    if var_rgnpfad.get() == 's':
        var_rgnpfad.set('file.pdf')  # <-- beachtet auf Linux / Windows slash/backslash
        shutil.copyfile(var_rgnpfad.get(), pdfname_ziel) # kopiert von Ziel
        os.remove(var_rgnpfad.get()) # lösch der Ziel
        print('### file.pdf importiert, Quell-Datei ist gelöscht! ###')   # mit Label tauschen
    elif var_rgnpfad.get() == 'n' or ' ':
        print("### für diese Rechnung wurde keine PDF-Datei importiert! ###")  # mit Label tauschen
    else:
        shutil.copyfile(var_rgnpfad.get(), pdfname_ziel)
        print('### PDF-Datei importiert, Quelle NICHT gelöscht! ###')  # mit Label tauschen

def ende():  # esta funcion terminatodo con el boton "Exit"
    master.destroy()


# GUI start


etiketten()         # baut die fenster mit die notwendige etiketten
eingaben_rech()     # lass die Eingaben für Rechnung
eingaben_art()      # lass die Eingaben für Artikeln

# --------

master.mainloop()

# --------
